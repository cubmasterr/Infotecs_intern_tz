// <auto-generated />
using System;
using Infotecs_intern_tz.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infotecs_intern_tz.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20250728214740_Start")]
    partial class Start
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Infotecs_intern_tz.Models.ResultEntry", b =>
                {
                    b.Property<string>("fileName")
                        .HasColumnType("text");

                    b.HasKey("fileName");

                    b.ToTable("results");
                });

            modelBuilder.Entity("Infotecs_intern_tz.Models.ValueEntry", b =>
                {
                    b.Property<string>("fileName")
                        .HasColumnType("text");

                    b.HasKey("fileName");

                    b.ToTable("values");
                });

            modelBuilder.Entity("Infotecs_intern_tz.Models.ResultEntry", b =>
                {
                    b.OwnsOne("Infotecs_intern_tz.Schemas.Resultschema", "result", b1 =>
                        {
                            b1.Property<string>("ResultEntryfileName")
                                .HasColumnType("text");

                            b1.Property<long>("averageExecutionTime")
                                .HasColumnType("bigint");

                            b1.Property<float>("averageValue")
                                .HasColumnType("real");

                            b1.Property<long>("deltaTime")
                                .HasColumnType("bigint");

                            b1.Property<float>("maxValue")
                                .HasColumnType("real");

                            b1.Property<float>("medianValue")
                                .HasColumnType("real");

                            b1.Property<DateTime>("minDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<float>("minValue")
                                .HasColumnType("real");

                            b1.HasKey("ResultEntryfileName");

                            b1.ToTable("results");

                            b1.WithOwner()
                                .HasForeignKey("ResultEntryfileName");
                        });

                    b.Navigation("result")
                        .IsRequired();
                });

            modelBuilder.Entity("Infotecs_intern_tz.Models.ValueEntry", b =>
                {
                    b.OwnsMany("Infotecs_intern_tz.Schemas.ValueSchema", "value", b1 =>
                        {
                            b1.Property<string>("ValueEntryfileName")
                                .HasColumnType("text");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<DateTime>("date")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<long>("executionTime")
                                .HasColumnType("bigint");

                            b1.Property<float>("value")
                                .HasColumnType("real");

                            b1.HasKey("ValueEntryfileName", "Id");

                            b1.ToTable("ValueSchema");

                            b1.WithOwner()
                                .HasForeignKey("ValueEntryfileName");
                        });

                    b.Navigation("value");
                });
#pragma warning restore 612, 618
        }
    }
}
